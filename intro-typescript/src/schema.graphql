type Query {
  "Playlists hand-picked to be featured to all users."
  featuredPlaylists: [Playlist!]!
  playlist(id: ID!): Playlist
}

"A curated collection of tracks designed for a specific activity or mood."
type Playlist {
  "The ID for the playlist."
  id: ID!
  "The name of the playlist."
  name: String!
  "Describes the playlist, what to expect and entices the user to listen."
  description: String
  tracks: [Track!]!
}

"A single audio file, usually a song."
type Track {
  "The ID for the track."
  id: ID!
  "The name of the track"
  name: String!
  "The track length in milliseconds."
  duration_ms: Int!
  "Whether or not the track has explicit lyrics (true = yes it does; false = no it does not OR unknown)"
  explicit: Boolean!
  "The URI for the track, usually a Spotify link."
  uri: String!
}

type Mutation {
  "Add one or more items to a user's playlist."
  addItemsToPlaylist(
    input: addItemsToPlaylistInput!
  ): addItemsToPlaylistPayload!
}

type addItemsToPlaylistPayload {
  "Similar to HTTP status code, represents the status of the mutation"
  code: Int!
  "Indicates whether the mutation was successful"
  success: Boolean!
  "Human-readable message for the UI"
  message: String!
  "The playlist that contains the newly added items"
  playlist: Playlist
}

input addItemsToPlaylistInput {
  "The ID of the playlist."
  playlistId: ID!
  "A comma-separated list of Spotify URIs to add."
  uris: [String!]!
}
